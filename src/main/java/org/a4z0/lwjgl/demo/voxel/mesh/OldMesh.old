package org.a4z0.lwjgl.demo.voxel.mesh;

import org.a4z0.lwjgl.demo.voxel.legacy.collision.AABB3i;
import org.a4z0.lwjgl.demo.voxel.position.Direction;
import org.a4z0.lwjgl.demo.voxel.gl.vertex.VertexStream;
import org.a4z0.lwjgl.demo.voxel.gl.voxel.Voxel;
import org.a4z0.lwjgl.demo.voxel.chunk.IChunkProvider;

/**
* ...
*/

@Deprecated
public class OldMesh implements Mesh {

    protected final VertexStream VERTEX_STREAM = new VertexStream();

    protected final AABB3i AABB;

    /**
    * Construct a {@link OldMesh}.
    *
    * @param x1 ...
    * @param y1 ...
    * @param z1 ...
    * @param x2 ...
    * @param y2 ...
    * @param z2 ...
    */

    public OldMesh(int x1, int y1, int z1, int x2, int y2, int z2) {
        this(new AABB3i(x1, y1, z1, x2, y2, z2));
    }

    /**
    * Construct a {@link OldMesh}.
    *
    * @param AABB {@link AABB3i} that represents the {@link OldMesh}'s Boundaries.
    */

    public OldMesh(AABB3i AABB) {
        this.AABB = AABB;
    }

    /**
    * ...
    *
    * @param provider ...
    *
    * @return a {@link VertexStream}.
    */

    public VertexStream build(IChunkProvider provider) {
        this.VERTEX_STREAM.flush();

        for(int x = this.AABB.getLowerX(); x <= this.AABB.getUpperX(); x++) {
            for(int y = this.AABB.getLowerY(); y <= this.AABB.getUpperY(); y++) {
                for(int z = this.AABB.getLowerZ(); z <= this.AABB.getUpperZ(); z++) {
                    Voxel voxel = provider.getChunkAt(x, z).getVoxel(x, y, z);

                    if(voxel == null || voxel.compare(Voxel.EMPTY_VOXEL))
                        continue;

                    for(Direction direction : Direction.values())
                        if(this.getNeighborAt(provider, direction, x, y, z))
                            Generator.stream(this.VERTEX_STREAM, direction, x, y, z, 1f, (voxel.getColor() >> 16) & 0xFF, (voxel.getColor() >> 8) & 0xFF, voxel.getColor() & 0xFF, (voxel.getColor() >> 24) & 0xFF);
                }
            }
        }

        return this.VERTEX_STREAM;
    }

    protected boolean getNeighborAt(IChunkProvider Provider, Direction Direction, int X, int Y, int Z) {
        switch (Direction) {
            case NORTH:
                Z -= 1;

                break;
            case SOUTH:
                Z += 1;

                break;
            case EAST:
                X += 1;

                break;
            case WEST:
                X -= 1;

                break;
            case TOP:
                Y += 1;

                break;
            case BOTTOM:
                Y -= 1;

                break;
        };

        Voxel VOXEL = Provider.getChunkAt(X, Z)
            .getVoxel(X, Y, Z);

        return VOXEL == null || VOXEL.compare(Voxel.EMPTY_VOXEL);
    }
}